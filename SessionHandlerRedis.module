<?php

/**
 * Session handler for storing sessions to Redis
 *
 * Redis is an extremely fast in-memory data-store. Using it allows PW installations running on different machines to
 * access a centralised session server.
 *
 * @see /wire/core/SessionHandler.php
 * @see /wire/modules/Session/SessionHandlerDB.module
 *
 *
 * PRE-REQUISITES
 * ==============
 *
 * This module requires that a redis server be contactable from the machine running ProcessWire and also requires the
 * Predis module to be installed.
 *
 *
 * CONFIGURATION
 * =============
 *
 * By default the module will attempt to connect to redis on 127.0.0.1 using the default redis port of 6379. It will use
 * a TTL of 30 mins (1800seconds) for all session keys and will prefix them with PHPSESSID: and store them all in the
 * default redis DB (number 0).
 *
 * You can change any of these defaults by adding the following lines to your config.php file (adjusting as needed)...
 * $redis_session_server_ip     = '127.0.0.1';
 * $redis_session_server_port   = 6379;
 * $redis_session_server_db     = 0;
 * $redis_session_server_prefix = "PHPSESSID:";
 * $redis_session_server_ttl    = 1800;
 *
 *
 * License
 * =======
 *
 * Copyright (c) 2014 Stephen Dickinson, QBox.
 * GPLv2 or higher.
 *
 */

class SessionHandlerRedis extends WireSessionHandler implements Module, ConfigurableModule
{

    public static function getModuleInfo()
    {
        return array(
            'title'    => __('Session Handler Redis', __FILE__),
            'version'  => 50,
            'summary'  => __("Installing this module makes ProcessWire store sessions in a Redis database rather than the file system. Note that this module will log you out after install or uninstall.", __FILE__),
            'author'   => 'S. Dickinson, QBox.co',
            'autoload' => true,
            'singular' => true,
        );
    }


    /**
     * Quick reference to redis
     *
     */
    protected $redis = null;



    /**
     *
     */
    protected static function _open($redis)
    {
        if (null === $redis) {
            $c = wire('config');
            // Read/set the config values from the defaults if not defined in the config file...
            if (!$c->has('redis_session_server_ip')) {
                $c->set('redis_session_server_ip', '127.0.0.1');
            }

            if (!$c->has('redis_session_server_port')) {
                $c->set('redis_session_server_port', 6379);
            }

            if (!$c->has('redis_session_server_password')) {
                $c->set('redis_session_server_password', NULL);
            }

            if (!$c->has('redis_session_server_db')) {
                $c->set('redis_session_server_db', 0);
            }

            if (!$c->has('redis_session_server_ttl')) {
                $c->set('redis_session_server_ttl', 1800);
            }

            if (!$c->has('redis_session_server_prefix')) {
                $c->set('redis_session_server_prefix', 'PHPSESSID:');
            }

            $redis = new \Redis();
            $redis->pconnect($c->redis_session_server_ip, $c->redis_session_server_port);
	    if ($c->redis_session_server_password !== NULL)
	    	$redis->auth ($c->redis_session_server_password);
            $redis->select($c->redis_session_server_db);
        }

        return $redis;
    }


    /**
     * Open a connection to our redis server.
     */
    public function open($path, $name)
    {
        try {
            $this->redis = self::_open($this->redis);
        } catch (Exception $e) {
            return false;
        }

        if (null == $this->redis) {
            throw new WireException('Could not connect to Redis database.');
            return false;
        }

        return true;
    }


    /**
     * Close the connection to our redis server.
     */
    public function close() {
        if (null !== $this->redis) {
            unset($this->redis);
            $this->redis = null;
        }

        return true;
    }


    /**
     * Generate a key for storage of the given session ID.
     */
    protected function key($id)
    {
        return $this->config->redis_session_server_prefix . $id;
    }


    /**
     * Read and return data for session indicated by $id
     *
     * @param string $id Session ID
     * @return string Serialized data or blank string if none
     *
     */
    public function read($id)
    {
        $key = $this->key($id);
        for ($i = 0; $i < 2 && !($data = $this->redis->get($key)); $i++)
            $this->write($id, TRUE);
        $this->redis->expire($key, $this->config->redis_session_server_ttl);
        return $data;
    }


    /**
     * Write the given $data for the given session ID
     *
     * @param string $id Session ID
     * @param string Serialized data to write
     * @return bool
     *
     */
    public function write($id, $data)
    {
        $key = $this->key($id);
        $this->redis->set($key, $data);
        $this->redis->expire($key, $this->config->redis_session_server_ttl);
        return true;
    }


    /**
     * Destroy the session indicated by the given session ID
     *
     * @param string $id Session ID
     * @return bool True on success, false on failure
     *
     */
    public function destroy($id)
    {
        $key = $this->key($id);
        $this->redis->del($key);
        setcookie(session_name(), '', time()-3600);
        return true;
    }


    /**
     * Garbage collection: remove stale sessions
     *
     * @param int $seconds Max lifetime of a session
     * @return bool True on success, false on failure
     *
     */
    public function gc($seconds)
    {
        // Intentionally empty. We use the Redis TTL feature to do garbage collection.
    }


    public function ___install()
    {
        // Force a non-connection error to be thrown if the current config doesn't lead to a redis connection.
        try {
            $redis = self::_open(null);
        } catch (\Exception $e) {
            $setup = self::getSetup();
            $setup = implode(", ", $setup);
            $msg = __("Aborting redis session store installation. Please adjust settings in your config file - see the comments in SessionHandlerRedis.module for more information. Settings... ", __FILE__)." $setup";

            throw new \WireException($msg);
        }

        $this->message(__("Redis connection OK.", __FILE__));
    }



    public static function getSetup()
    {
        $c = wire('config');

        $setup['ip']     = __("Server IP address:", __FILE__) . ' ' . $c->redis_session_server_ip;
        $setup['port']   = __("Server port:", __FILE__) . ' ' . $c->redis_session_server_port;
        $setup['db']     = __("Server DB number (zero-based index integer.):", __FILE__) . ' ' .$c->redis_session_server_db;
        $setup['prefix'] = __("Session prefix for redis key generation:", __FILE__) . ' "' . $c->redis_session_server_prefix . '"';
        $setup['ttl']    = __("TTL for session strings:", __FILE__) . ' ' . $c->redis_session_server_ttl;

        return $setup;
    }



    /**
     * Session Handler Redis configuration options
     *
     */
    public static function getModuleConfigInputfields(array $data)
    {
        $fields = new InputfieldWrapper();
        $m      = wire('modules');

        try {
            $redis = self::_open(null);
            $redis_ok = true;
        } catch (\Exception $e) {
            $redis_ok = false;
        }

        $setup = self::getSetup();

        $string = "<p>" . __("Configuration details for redis access are as follows...", __FILE__) . "</p>" .
                  "<ul>\n<li>" . implode("</li>\n<li>", $setup) . "</li>\n</ul>\n";

        $f = $m->get("InputfieldMarkup");
        $f->label = __("Redis Session Storage Notes.", __FILE__);
        if ($redis_ok) {
            $status = __( "Access to a redis server was successful.", __FILE__);
        } else {
            $status = __( "<strong>WARNING!</strong> access to a redis server is needed.</strong>", __FILE__);
        }
        $f->value = "<p>$status</p>". $string;

        $fields->add($f);

        return $fields;
    }


    /**
     * Provides direct reference access to set values in the $data array
     *
     * For some reason PHP 5.4+ requires this, as it apparently doesn't see WireData
     *
     */
    public function __set($key, $value)
    {
        $this->set($key, $value);
    }


    /**
     * Provides direct reference access to variables in the $data array
     *
     * For some reason PHP 5.4+ requires this, as it apparently doesn't see WireData
     *
     * Otherwise the same as get()
     *
     * @param string $key
     *
     */
    public function __get($key)
    {
        return $this->get($key);
    }
}